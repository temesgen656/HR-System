
package edu.udc.cs1;
import java.util.*;
/**
 *11/24/2020
 * @author Temesgen Alemayehu
 */
//1 Create a public class fully-qualified as edu.udc.cs1.HR.
public class HR {
/*2) In your HR class create a private attribute that will hold an array of edu.udc.cs1.Employee. */
    private Employee [] allEmployees;
    
    public static void main(String[] args) {
 /*5 Create your main method to instantiate HR.
 The main method is also in the HR class.  The code must call processEmps().*/
   
     HR h = new HR(); // prossesing HR 
     h.processEmps();
     
 /*6 Run the code to test no syntax errors.If correct,
 we should see the version “1.0_2020.11.1” on the screen. Remove this output code*/
    
    //System.out.println(CS1Utils.getStaticVersion());    
    
    }
/*3 Create a public instance method called processEmps()
that returns void in the HR class*/
public void processEmps(){
/* 3 In processEmps(), include code to make an instance of edu.udc.cs1.CS1Utils.*/
    
    CS1Utils i = new CS1Utils();

/*4) Include code that will simply output the version retrieved from getStaticVersion().
Important to remember that this is a static method and is best called appropriately.*/
    
    CS1Utils.getStaticVersion();
    
/*7 Assign the attribute created in 1 to the return from CS1Utils's
getAllEmployees() method which will return an array of edu.udc.cs1.Employee classes.*/
    
    allEmployees = i.getAllEmployees(); 
    //System.out.println("e"+ allEmployees.length);
    sortWorkers();
    Scanner input= new Scanner(System.in);
    
    System.out.println("Plese entere First name: ");
    String Fname = input.nextLine();
    
    System.out.println("Plese entere Last name: ");
    String Lname = input.nextLine();
    
    int locate = findEmp(allEmployees,Fname,Lname);
    
    if (locate >=0){
    System.out.println("The employee located in " + locate + "location");
    }
    else{
        System.out.println("i cant find the employee ");
        }
        
    }
/*8 In HR, create a public instance method called sortWorkers().  
This method sort the array defined in 1. 
This method must check that the array is not null before sorting it. 
Employees must be sorted in order of email address, descending. 
The method must output the first, 
last name and the email of the first, second, second to last and very last (4 total) employees.*/

public void sortWorkers(){
    if (allEmployees == null)
        return;
    
    if (allEmployees.length > 0){
        ArrayList<Employee> worker = new ArrayList<>();
        
                   
    worker.addAll(Arrays.asList(allEmployees));
    Collections.sort(worker, Comparator.comparing
        (Employee::getEmail).reversed());
            
    System.out.println(allEmployees[0].getFirstName() + " " + allEmployees[0].getLastName() 
       +" " + allEmployees[0].getEmail());
    System.out.println(allEmployees[1].getFirstName() + " " + allEmployees[1].getLastName() 
       +" " + allEmployees[1].getEmail());
    System.out.println(allEmployees[allEmployees.length - 2].getFirstName() + " " 
      + allEmployees[allEmployees.length - 2].getLastName() 
      +" " + allEmployees[allEmployees.length - 2].getEmail());
    System.out.println(allEmployees[allEmployees.length - 1].getFirstName() + " " 
        + allEmployees[allEmployees.length - 1].getLastName() 
        +" " + allEmployees[allEmployees.length - 1].getEmail());
        }
        }
    

/*9 in HR, create a method called getHighPaid()
to return a 3 element String array that contains the First name, 
last name, and email of the employee with the highest salary, in that order.
The employeeArray defined in 1 above will be used to find the employee.*/
        
public String[] getHighPaid(){
    int highst =0;
    for (int i = 0; i < allEmployees.length; i++) {
        Employee allEmployee = allEmployees[i];
        if (allEmployee.getSalary() > allEmployees[highst].getSalary() ) 
            highst =i;
    }
        String[] hi = new String[3];
        hi [0] = allEmployees[highst].getFirstName();
        hi [1] = allEmployees[highst].getLastName();
        hi [2] = allEmployees[highst].getEmail();
    
          return hi;
    
}
  
  
/*10 In HR, create a method called findEmp() that will return the 
index of the first element that matches a first and last name, 
case insensitive from the Employee array attribute.  
The first and last name to search for must be passed as parameters.  
If the employee doesn’t exist in the company, return a negative number.  
Include code in processEmps() (2 above) that will prompt user for
a first and a last name to search for.
Obtain and pass these as separate values to findEmp().*/

public static int  findEmp(Employee [] allEmployee, String Fname, String Lname){
    int poiter = -1;
    for (int i = 0; i < allEmployee.length; i++) {
        Employee worker = allEmployee[i];
        if (!worker.getLastName().toLowerCase().equals(Lname.toLowerCase())){
        } 
        else {
          if (worker.getFirstName().toLowerCase().equals(Fname.toLowerCase())) {
             poiter = i;
            }
            }
        }
        return poiter;
   
}

}
  

